from .models import EnergyHH
import os
from datetime import date
import pandas as pd
from django.db.models import Max
from django.db.models import Avg

#Imports BMRS API key from .env. Key can be generated by making an account on elexon portal
api_key = str(os.environ.get('API_KEY'))

def updateHistoric():

    """
    Function to update historic sqlite3 database to current date by pulling from
    BMRS API
    """

    #Obtain last date in database
    obj = EnergyHH.objects.latest('settleDate')
    fieldObject = EnergyHH._meta.get_field('settleDate')
    latestDate = fieldObject.value_from_object(obj)
    
    #Obtain latest period in database
    latestObj = EnergyHH.objects.filter(settleDate = latestDate)
    latestItem = latestObj.aggregate(Max('settlePeriod'))
    latestPeriod = latestItem['settlePeriod__max']
    
    
    #Obtain today's date
    endDate = date.today()
    #Form URL from from last date to current date from BMRS API
    url = 'https://api.bmreports.com/BMRS/FUELHH/V1?APIKey={0}&FromDate={1}&ToDate={2}&ServiceType=csv'.format(api_key, str(latestDate), str(endDate))
    
    #Download from csv into pandas db and manipulate to be the same format as sqlit3 DB if url is valid
    try:
        updateDB = pd.read_csv(url, header=None, skiprows=[0])
    except:
        updateInfo = {'updatedBool' : False, 'lastUpdated' : latestDate}
        return (updateInfo)    
    else:
        updateDB = updateDB.drop(columns=updateDB.columns[0])
        updateDB = updateDB.drop(index=updateDB.index[-1])
        updateDB[updateDB.columns[0]] = pd.to_datetime(updateDB[updateDB.columns[0]], format='%Y%m%d').dt.strftime("%Y-%m-%d")
    
        #Add columns to pandas df for readability
        columnNames = ["Settlement Date", "Settlement Period", "CCGT", "Oil", "Coal", "Nuclear", "Wind", "Pumped Storage", "Hydro (non pumped storage)", "OCGT", "Other", "France (IFA)", "Northern Ireland", "Netherlands", "Ireland", "Biomass", "Belgium", "France (Eleclink)", "France (IFA2)", "Norway"]
        updateDB.columns = columnNames
        
        #Delete duplicate entries in pandas df
        updateDB = updateDB.drop(updateDB[(updateDB['Settlement Date'] == str(latestDate)) & (updateDB['Settlement Period'] <= latestPeriod)].index)        
        
        #Iterate through rows and add pandas df to sqlite3 db in one query
        row_iter = updateDB.iterrows()
        objs = [
            EnergyHH(
                settleDate = row["Settlement Date"],
                settlePeriod = row["Settlement Period"],
                CCGT = row["CCGT"],
                oil = row["Oil"],
                coal = row["Coal"],
                nuclear = row["Nuclear"],
                wind = row["Wind"],
                pumped_storage = row["Pumped Storage"],
                hydro = row["Hydro (non pumped storage)"],
                OCGT = row["OCGT"],
                other = row["Other"],
                france_IFA = row["France (IFA)"],
                northern_ireland = row["Northern Ireland"],
                netherlands = row["Netherlands"],
                ireland = row["Ireland"],
                biomass = row["Biomass"],
                belgium = row["Belgium"],
                france_eleclink = row["France (Eleclink)"],
                france_IFA2 = row["France (IFA2)"],
                norway = row["Norway"],
            )
            for index, row in row_iter
        ]
        EnergyHH.objects.bulk_create(objs)
        
        #Function created to update UKHistory to current date!
        updateInfo = {'updatedBool' : True, 'lastUpdated' : endDate}
        return (updateInfo)

def findCarbonSplit(passedQuery):
    """
    Function to find the necessary chart inputs from a given queryset
    """

    #Finds carbon split
    carbonData = []
    ccgtAvg = passedQuery.aggregate(Avg('CCGT'))['CCGT__avg']
    ocgtAvg = passedQuery.aggregate(Avg('OCGT'))['OCGT__avg']
    coalAvg = passedQuery.aggregate(Avg('coal'))['coal__avg']
    oilAvg = passedQuery.aggregate(Avg('oil'))['oil__avg']
    carbonAvg = round(ccgtAvg + ocgtAvg + coalAvg + oilAvg)
    carbonData.append(round(carbonAvg*0.001,2))

    windAvg = passedQuery.aggregate(Avg('wind'))['wind__avg']
    nuclearAvg = passedQuery.aggregate(Avg('nuclear'))['nuclear__avg']
    hydroAvg = passedQuery.aggregate(Avg('hydro'))['hydro__avg']
    biomassAvg = passedQuery.aggregate(Avg('biomass'))['biomass__avg']
    noCarbonAvg = round(windAvg + nuclearAvg + hydroAvg + biomassAvg)
    carbonData.append(round(noCarbonAvg*0.001, 2))

    #Finds energy split
    energyData = []
    gasAvg = round(ccgtAvg + ocgtAvg)
    energyData.append(round(gasAvg*0.001,2))
    energyData.append(round(coalAvg*0.001,2))
    energyData.append(round(windAvg*0.001,2))
    energyData.append(round(nuclearAvg*0.001,2))
    energyData.append(round(biomassAvg*0.001,2))

    #Returns functions
    return carbonData, energyData
